name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.9.0
          run_install: false

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run specific commands for package management and git operations
          allowed_tools: |
            # Package Management
            Bash(npm install:*)
            Bash(npm run:*)
            Bash(npm test:*)
            Bash(npm ci:*)
            Bash(pnpm add:*)
            Bash(pnpm install:*)
            Bash(pnpm run:*)
            Bash(pnpm test:*)
            Bash(pnpm build:*)
            Bash(pnpm dev:*)
            Bash(pnpm format:*)
            Bash(pnpm lint:*)
            Bash(pnpm benchmark:*)
            Bash(pnpm dist:*)
            Bash(pnpm --version)
            
            # NPX Tools
            Bash(npx husky:*)
            Bash(npx lint-staged:*)
            Bash(npx jsonlint:*)
            Bash(npx prettier:*)
            Bash(npx eslint:*)
            Bash(npx jest:*)
            Bash(npx vite:*)
            Bash(npx electron:*)
            Bash(npx depcheck:*)
            
            # Node.js
            Bash(node:*)
            Bash(node scripts/*)
            Bash(node __tests__/*)
            
            # Git Operations
            Bash(git add:*)
            Bash(git commit:*)
            Bash(git push:*)
            Bash(git pull:*)
            Bash(git fetch:*)
            Bash(git status:*)
            Bash(git diff:*)
            Bash(git log:*)
            Bash(git branch:*)
            Bash(git checkout:*)
            Bash(git merge:*)
            Bash(git rebase:*)
            Bash(git stash:*)
            Bash(git rm:*)
            Bash(git mv:*)
            Bash(git reset:*)
            Bash(git show:*)
            Bash(git tag:*)
            Bash(git remote:*)
            
            # GitHub CLI
            Bash(gh pr:*)
            Bash(gh issue:*)
            Bash(gh repo:*)
            Bash(gh workflow:*)
            
            # File System Operations
            Bash(ls:*)
            Bash(cat:*)
            Bash(echo:*)
            Bash(pwd)
            Bash(cd:*)
            Bash(mkdir:*)
            Bash(rm:*)
            Bash(cp:*)
            Bash(mv:*)
            Bash(touch:*)
            Bash(chmod:*)
            Bash(find:*)
            Bash(grep:*)
            Bash(sed:*)
            Bash(awk:*)
            Bash(head:*)
            Bash(tail:*)
            Bash(wc:*)
            Bash(sort:*)
            Bash(uniq:*)
            
            # System Information
            Bash(which:*)
            Bash(whoami)
            Bash(uname:*)
            Bash(env)
            Bash(printenv:*)
            
            # Testing & CI
            Bash(jest:*)
            Bash(./test-*.sh)
            Bash(bash test-*.sh)
            Bash(sh test-*.sh)
            
            # JSON/YAML Tools
            Bash(jq:*)
            Bash(yq:*)
            
            # Process Management
            Bash(ps:*)
            Bash(kill:*)
            Bash(pkill:*)
            Bash(lsof:*)
          
          # Custom instructions for Claude to customize its behavior for this project
          custom_instructions: |
            This is a Groq Desktop application using Electron, React, and Vite.
            - Use pnpm as the package manager (v10.9.0)
            - Follow existing code patterns and project structure
            - Always run tests before committing changes
            - Use Prettier for formatting (config in .prettierrc.json)
            - Use ESLint for linting JavaScript/JSX files
            - Ensure JSON files are valid before committing
            - Write tests for new features when applicable
            - Update documentation when making significant changes
            - Use conventional commit messages (feat:, fix:, chore:, docs:, test:)
            - The project uses Node.js >=18.0.0
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

